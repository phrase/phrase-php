<?php
/**
 * BitbucketSync
 *
 * PHP version 5
 *
 * @category Class
 * @package  Phrase
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Phrase Strings API Reference
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@phrase.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Phrase\Model;

use \ArrayAccess;
use \Phrase\ObjectSerializer;

/**
 * BitbucketSync Class Doc Comment
 *
 * @category Class
 * @package  Phrase
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class BitbucketSync implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'bitbucket_sync';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'repository_name' => 'string',
        'last_export_to_bitbucket_at' => '\DateTime',
        'last_import_from_bitbucket_at' => '\DateTime',
        'valid_phraseapp_yaml' => 'bool',
        'phraseapp_projects' => '\Phrase\Model\ProjectShort[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'id' => null,
        'repository_name' => null,
        'last_export_to_bitbucket_at' => 'date-time',
        'last_import_from_bitbucket_at' => 'date-time',
        'valid_phraseapp_yaml' => null,
        'phraseapp_projects' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'repository_name' => 'repository_name',
        'last_export_to_bitbucket_at' => 'last_export_to_bitbucket_at',
        'last_import_from_bitbucket_at' => 'last_import_from_bitbucket_at',
        'valid_phraseapp_yaml' => 'valid_phraseapp_yaml',
        'phraseapp_projects' => 'phraseapp_projects'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'repository_name' => 'setRepositoryName',
        'last_export_to_bitbucket_at' => 'setLastExportToBitbucketAt',
        'last_import_from_bitbucket_at' => 'setLastImportFromBitbucketAt',
        'valid_phraseapp_yaml' => 'setValidPhraseappYaml',
        'phraseapp_projects' => 'setPhraseappProjects'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'repository_name' => 'getRepositoryName',
        'last_export_to_bitbucket_at' => 'getLastExportToBitbucketAt',
        'last_import_from_bitbucket_at' => 'getLastImportFromBitbucketAt',
        'valid_phraseapp_yaml' => 'getValidPhraseappYaml',
        'phraseapp_projects' => 'getPhraseappProjects'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['repository_name'] = isset($data['repository_name']) ? $data['repository_name'] : null;
        $this->container['last_export_to_bitbucket_at'] = isset($data['last_export_to_bitbucket_at']) ? $data['last_export_to_bitbucket_at'] : null;
        $this->container['last_import_from_bitbucket_at'] = isset($data['last_import_from_bitbucket_at']) ? $data['last_import_from_bitbucket_at'] : null;
        $this->container['valid_phraseapp_yaml'] = isset($data['valid_phraseapp_yaml']) ? $data['valid_phraseapp_yaml'] : null;
        $this->container['phraseapp_projects'] = isset($data['phraseapp_projects']) ? $data['phraseapp_projects'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets repository_name
     *
     * @return string|null
     */
    public function getRepositoryName()
    {
        return $this->container['repository_name'];
    }

    /**
     * Sets repository_name
     *
     * @param string|null $repository_name repository_name
     *
     * @return $this
     */
    public function setRepositoryName($repository_name)
    {
        $this->container['repository_name'] = $repository_name;

        return $this;
    }

    /**
     * Gets last_export_to_bitbucket_at
     *
     * @return \DateTime|null
     */
    public function getLastExportToBitbucketAt()
    {
        return $this->container['last_export_to_bitbucket_at'];
    }

    /**
     * Sets last_export_to_bitbucket_at
     *
     * @param \DateTime|null $last_export_to_bitbucket_at last_export_to_bitbucket_at
     *
     * @return $this
     */
    public function setLastExportToBitbucketAt($last_export_to_bitbucket_at)
    {
        $this->container['last_export_to_bitbucket_at'] = $last_export_to_bitbucket_at;

        return $this;
    }

    /**
     * Gets last_import_from_bitbucket_at
     *
     * @return \DateTime|null
     */
    public function getLastImportFromBitbucketAt()
    {
        return $this->container['last_import_from_bitbucket_at'];
    }

    /**
     * Sets last_import_from_bitbucket_at
     *
     * @param \DateTime|null $last_import_from_bitbucket_at last_import_from_bitbucket_at
     *
     * @return $this
     */
    public function setLastImportFromBitbucketAt($last_import_from_bitbucket_at)
    {
        $this->container['last_import_from_bitbucket_at'] = $last_import_from_bitbucket_at;

        return $this;
    }

    /**
     * Gets valid_phraseapp_yaml
     *
     * @return bool|null
     */
    public function getValidPhraseappYaml()
    {
        return $this->container['valid_phraseapp_yaml'];
    }

    /**
     * Sets valid_phraseapp_yaml
     *
     * @param bool|null $valid_phraseapp_yaml valid_phraseapp_yaml
     *
     * @return $this
     */
    public function setValidPhraseappYaml($valid_phraseapp_yaml)
    {
        $this->container['valid_phraseapp_yaml'] = $valid_phraseapp_yaml;

        return $this;
    }

    /**
     * Gets phraseapp_projects
     *
     * @return \Phrase\Model\ProjectShort[]|null
     */
    public function getPhraseappProjects()
    {
        return $this->container['phraseapp_projects'];
    }

    /**
     * Sets phraseapp_projects
     *
     * @param \Phrase\Model\ProjectShort[]|null $phraseapp_projects phraseapp_projects
     *
     * @return $this
     */
    public function setPhraseappProjects($phraseapp_projects)
    {
        $this->container['phraseapp_projects'] = $phraseapp_projects;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


