<?php
/**
 * RepoSync
 *
 * PHP version 5
 *
 * @category Class
 * @package  Phrase
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Phrase Strings API Reference
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@phrase.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Phrase\Model;

use \ArrayAccess;
use \Phrase\ObjectSerializer;

/**
 * RepoSync Class Doc Comment
 *
 * @category Class
 * @package  Phrase
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class RepoSync implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'repo_sync';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'project' => '\Phrase\Model\ProjectShort',
        'provider' => 'string',
        'enabled' => 'bool',
        'auto_import' => 'bool',
        'repo_name' => 'string',
        'created_at' => '\DateTime',
        'last_import_at' => '\DateTime',
        'last_export_at' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'id' => null,
        'project' => null,
        'provider' => null,
        'enabled' => null,
        'auto_import' => null,
        'repo_name' => null,
        'created_at' => 'date-time',
        'last_import_at' => 'date-time',
        'last_export_at' => 'date-time'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'project' => 'project',
        'provider' => 'provider',
        'enabled' => 'enabled',
        'auto_import' => 'auto_import',
        'repo_name' => 'repo_name',
        'created_at' => 'created_at',
        'last_import_at' => 'last_import_at',
        'last_export_at' => 'last_export_at'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'project' => 'setProject',
        'provider' => 'setProvider',
        'enabled' => 'setEnabled',
        'auto_import' => 'setAutoImport',
        'repo_name' => 'setRepoName',
        'created_at' => 'setCreatedAt',
        'last_import_at' => 'setLastImportAt',
        'last_export_at' => 'setLastExportAt'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'project' => 'getProject',
        'provider' => 'getProvider',
        'enabled' => 'getEnabled',
        'auto_import' => 'getAutoImport',
        'repo_name' => 'getRepoName',
        'created_at' => 'getCreatedAt',
        'last_import_at' => 'getLastImportAt',
        'last_export_at' => 'getLastExportAt'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['project'] = isset($data['project']) ? $data['project'] : null;
        $this->container['provider'] = isset($data['provider']) ? $data['provider'] : null;
        $this->container['enabled'] = isset($data['enabled']) ? $data['enabled'] : null;
        $this->container['auto_import'] = isset($data['auto_import']) ? $data['auto_import'] : null;
        $this->container['repo_name'] = isset($data['repo_name']) ? $data['repo_name'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['last_import_at'] = isset($data['last_import_at']) ? $data['last_import_at'] : null;
        $this->container['last_export_at'] = isset($data['last_export_at']) ? $data['last_export_at'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets project
     *
     * @return \Phrase\Model\ProjectShort|null
     */
    public function getProject()
    {
        return $this->container['project'];
    }

    /**
     * Sets project
     *
     * @param \Phrase\Model\ProjectShort|null $project project
     *
     * @return $this
     */
    public function setProject($project)
    {
        $this->container['project'] = $project;

        return $this;
    }

    /**
     * Gets provider
     *
     * @return string|null
     */
    public function getProvider()
    {
        return $this->container['provider'];
    }

    /**
     * Sets provider
     *
     * @param string|null $provider provider
     *
     * @return $this
     */
    public function setProvider($provider)
    {
        $this->container['provider'] = $provider;

        return $this;
    }

    /**
     * Gets enabled
     *
     * @return bool|null
     */
    public function getEnabled()
    {
        return $this->container['enabled'];
    }

    /**
     * Sets enabled
     *
     * @param bool|null $enabled enabled
     *
     * @return $this
     */
    public function setEnabled($enabled)
    {
        $this->container['enabled'] = $enabled;

        return $this;
    }

    /**
     * Gets auto_import
     *
     * @return bool|null
     */
    public function getAutoImport()
    {
        return $this->container['auto_import'];
    }

    /**
     * Sets auto_import
     *
     * @param bool|null $auto_import auto_import
     *
     * @return $this
     */
    public function setAutoImport($auto_import)
    {
        $this->container['auto_import'] = $auto_import;

        return $this;
    }

    /**
     * Gets repo_name
     *
     * @return string|null
     */
    public function getRepoName()
    {
        return $this->container['repo_name'];
    }

    /**
     * Sets repo_name
     *
     * @param string|null $repo_name repo_name
     *
     * @return $this
     */
    public function setRepoName($repo_name)
    {
        $this->container['repo_name'] = $repo_name;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime|null
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime|null $created_at created_at
     *
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets last_import_at
     *
     * @return \DateTime|null
     */
    public function getLastImportAt()
    {
        return $this->container['last_import_at'];
    }

    /**
     * Sets last_import_at
     *
     * @param \DateTime|null $last_import_at last_import_at
     *
     * @return $this
     */
    public function setLastImportAt($last_import_at)
    {
        $this->container['last_import_at'] = $last_import_at;

        return $this;
    }

    /**
     * Gets last_export_at
     *
     * @return \DateTime|null
     */
    public function getLastExportAt()
    {
        return $this->container['last_export_at'];
    }

    /**
     * Sets last_export_at
     *
     * @param \DateTime|null $last_export_at last_export_at
     *
     * @return $this
     */
    public function setLastExportAt($last_export_at)
    {
        $this->container['last_export_at'] = $last_export_at;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


