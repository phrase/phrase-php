<?php
/**
 * UploadSummary
 *
 * PHP version 5
 *
 * @category Class
 * @package  Phrase
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Phrase Strings API Reference
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@phrase.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Phrase\Model;

use \ArrayAccess;
use \Phrase\ObjectSerializer;

/**
 * UploadSummary Class Doc Comment
 *
 * @category Class
 * @package  Phrase
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class UploadSummary implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'upload_summary';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'locales_created' => 'int',
        'translation_keys_created' => 'int',
        'translation_keys_updated' => 'int',
        'translation_keys_unmentioned' => 'int',
        'translations_created' => 'int',
        'translations_updated' => 'int',
        'tags_created' => 'int',
        'translation_keys_ignored' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'locales_created' => null,
        'translation_keys_created' => null,
        'translation_keys_updated' => null,
        'translation_keys_unmentioned' => null,
        'translations_created' => null,
        'translations_updated' => null,
        'tags_created' => null,
        'translation_keys_ignored' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'locales_created' => 'locales_created',
        'translation_keys_created' => 'translation_keys_created',
        'translation_keys_updated' => 'translation_keys_updated',
        'translation_keys_unmentioned' => 'translation_keys_unmentioned',
        'translations_created' => 'translations_created',
        'translations_updated' => 'translations_updated',
        'tags_created' => 'tags_created',
        'translation_keys_ignored' => 'translation_keys_ignored'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'locales_created' => 'setLocalesCreated',
        'translation_keys_created' => 'setTranslationKeysCreated',
        'translation_keys_updated' => 'setTranslationKeysUpdated',
        'translation_keys_unmentioned' => 'setTranslationKeysUnmentioned',
        'translations_created' => 'setTranslationsCreated',
        'translations_updated' => 'setTranslationsUpdated',
        'tags_created' => 'setTagsCreated',
        'translation_keys_ignored' => 'setTranslationKeysIgnored'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'locales_created' => 'getLocalesCreated',
        'translation_keys_created' => 'getTranslationKeysCreated',
        'translation_keys_updated' => 'getTranslationKeysUpdated',
        'translation_keys_unmentioned' => 'getTranslationKeysUnmentioned',
        'translations_created' => 'getTranslationsCreated',
        'translations_updated' => 'getTranslationsUpdated',
        'tags_created' => 'getTagsCreated',
        'translation_keys_ignored' => 'getTranslationKeysIgnored'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['locales_created'] = isset($data['locales_created']) ? $data['locales_created'] : null;
        $this->container['translation_keys_created'] = isset($data['translation_keys_created']) ? $data['translation_keys_created'] : null;
        $this->container['translation_keys_updated'] = isset($data['translation_keys_updated']) ? $data['translation_keys_updated'] : null;
        $this->container['translation_keys_unmentioned'] = isset($data['translation_keys_unmentioned']) ? $data['translation_keys_unmentioned'] : null;
        $this->container['translations_created'] = isset($data['translations_created']) ? $data['translations_created'] : null;
        $this->container['translations_updated'] = isset($data['translations_updated']) ? $data['translations_updated'] : null;
        $this->container['tags_created'] = isset($data['tags_created']) ? $data['tags_created'] : null;
        $this->container['translation_keys_ignored'] = isset($data['translation_keys_ignored']) ? $data['translation_keys_ignored'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets locales_created
     *
     * @return int|null
     */
    public function getLocalesCreated()
    {
        return $this->container['locales_created'];
    }

    /**
     * Sets locales_created
     *
     * @param int|null $locales_created locales_created
     *
     * @return $this
     */
    public function setLocalesCreated($locales_created)
    {
        $this->container['locales_created'] = $locales_created;

        return $this;
    }

    /**
     * Gets translation_keys_created
     *
     * @return int|null
     */
    public function getTranslationKeysCreated()
    {
        return $this->container['translation_keys_created'];
    }

    /**
     * Sets translation_keys_created
     *
     * @param int|null $translation_keys_created translation_keys_created
     *
     * @return $this
     */
    public function setTranslationKeysCreated($translation_keys_created)
    {
        $this->container['translation_keys_created'] = $translation_keys_created;

        return $this;
    }

    /**
     * Gets translation_keys_updated
     *
     * @return int|null
     */
    public function getTranslationKeysUpdated()
    {
        return $this->container['translation_keys_updated'];
    }

    /**
     * Sets translation_keys_updated
     *
     * @param int|null $translation_keys_updated translation_keys_updated
     *
     * @return $this
     */
    public function setTranslationKeysUpdated($translation_keys_updated)
    {
        $this->container['translation_keys_updated'] = $translation_keys_updated;

        return $this;
    }

    /**
     * Gets translation_keys_unmentioned
     *
     * @return int|null
     */
    public function getTranslationKeysUnmentioned()
    {
        return $this->container['translation_keys_unmentioned'];
    }

    /**
     * Sets translation_keys_unmentioned
     *
     * @param int|null $translation_keys_unmentioned translation_keys_unmentioned
     *
     * @return $this
     */
    public function setTranslationKeysUnmentioned($translation_keys_unmentioned)
    {
        $this->container['translation_keys_unmentioned'] = $translation_keys_unmentioned;

        return $this;
    }

    /**
     * Gets translations_created
     *
     * @return int|null
     */
    public function getTranslationsCreated()
    {
        return $this->container['translations_created'];
    }

    /**
     * Sets translations_created
     *
     * @param int|null $translations_created translations_created
     *
     * @return $this
     */
    public function setTranslationsCreated($translations_created)
    {
        $this->container['translations_created'] = $translations_created;

        return $this;
    }

    /**
     * Gets translations_updated
     *
     * @return int|null
     */
    public function getTranslationsUpdated()
    {
        return $this->container['translations_updated'];
    }

    /**
     * Sets translations_updated
     *
     * @param int|null $translations_updated translations_updated
     *
     * @return $this
     */
    public function setTranslationsUpdated($translations_updated)
    {
        $this->container['translations_updated'] = $translations_updated;

        return $this;
    }

    /**
     * Gets tags_created
     *
     * @return int|null
     */
    public function getTagsCreated()
    {
        return $this->container['tags_created'];
    }

    /**
     * Sets tags_created
     *
     * @param int|null $tags_created tags_created
     *
     * @return $this
     */
    public function setTagsCreated($tags_created)
    {
        $this->container['tags_created'] = $tags_created;

        return $this;
    }

    /**
     * Gets translation_keys_ignored
     *
     * @return int|null
     */
    public function getTranslationKeysIgnored()
    {
        return $this->container['translation_keys_ignored'];
    }

    /**
     * Sets translation_keys_ignored
     *
     * @param int|null $translation_keys_ignored translation_keys_ignored
     *
     * @return $this
     */
    public function setTranslationKeysIgnored($translation_keys_ignored)
    {
        $this->container['translation_keys_ignored'] = $translation_keys_ignored;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


