<?php
/**
 * LocaleDownloadCreateParameters
 *
 * PHP version 5
 *
 * @category Class
 * @package  Phrase
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Phrase Strings API Reference
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@phrase.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Phrase\Model;

use \ArrayAccess;
use \Phrase\ObjectSerializer;

/**
 * LocaleDownloadCreateParameters Class Doc Comment
 *
 * @category Class
 * @package  Phrase
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class LocaleDownloadCreateParameters implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'locale_download_create_parameters';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'file_format' => 'string',
        'branch' => 'string',
        'tags' => 'string',
        'include_empty_translations' => 'bool',
        'exclude_empty_zero_forms' => 'bool',
        'include_translated_keys' => 'bool',
        'keep_notranslate_tags' => 'bool',
        'format_options' => 'object',
        'encoding' => 'string',
        'include_unverified_translations' => 'bool',
        'use_last_reviewed_version' => 'bool',
        'locale_ids' => 'string[]',
        'fallback_locale_id' => 'string',
        'source_locale_id' => 'string',
        'custom_metadata_filters' => 'object'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'file_format' => null,
        'branch' => null,
        'tags' => null,
        'include_empty_translations' => null,
        'exclude_empty_zero_forms' => null,
        'include_translated_keys' => null,
        'keep_notranslate_tags' => null,
        'format_options' => null,
        'encoding' => null,
        'include_unverified_translations' => null,
        'use_last_reviewed_version' => null,
        'locale_ids' => null,
        'fallback_locale_id' => null,
        'source_locale_id' => null,
        'custom_metadata_filters' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'file_format' => 'file_format',
        'branch' => 'branch',
        'tags' => 'tags',
        'include_empty_translations' => 'include_empty_translations',
        'exclude_empty_zero_forms' => 'exclude_empty_zero_forms',
        'include_translated_keys' => 'include_translated_keys',
        'keep_notranslate_tags' => 'keep_notranslate_tags',
        'format_options' => 'format_options',
        'encoding' => 'encoding',
        'include_unverified_translations' => 'include_unverified_translations',
        'use_last_reviewed_version' => 'use_last_reviewed_version',
        'locale_ids' => 'locale_ids',
        'fallback_locale_id' => 'fallback_locale_id',
        'source_locale_id' => 'source_locale_id',
        'custom_metadata_filters' => 'custom_metadata_filters'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'file_format' => 'setFileFormat',
        'branch' => 'setBranch',
        'tags' => 'setTags',
        'include_empty_translations' => 'setIncludeEmptyTranslations',
        'exclude_empty_zero_forms' => 'setExcludeEmptyZeroForms',
        'include_translated_keys' => 'setIncludeTranslatedKeys',
        'keep_notranslate_tags' => 'setKeepNotranslateTags',
        'format_options' => 'setFormatOptions',
        'encoding' => 'setEncoding',
        'include_unverified_translations' => 'setIncludeUnverifiedTranslations',
        'use_last_reviewed_version' => 'setUseLastReviewedVersion',
        'locale_ids' => 'setLocaleIds',
        'fallback_locale_id' => 'setFallbackLocaleId',
        'source_locale_id' => 'setSourceLocaleId',
        'custom_metadata_filters' => 'setCustomMetadataFilters'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'file_format' => 'getFileFormat',
        'branch' => 'getBranch',
        'tags' => 'getTags',
        'include_empty_translations' => 'getIncludeEmptyTranslations',
        'exclude_empty_zero_forms' => 'getExcludeEmptyZeroForms',
        'include_translated_keys' => 'getIncludeTranslatedKeys',
        'keep_notranslate_tags' => 'getKeepNotranslateTags',
        'format_options' => 'getFormatOptions',
        'encoding' => 'getEncoding',
        'include_unverified_translations' => 'getIncludeUnverifiedTranslations',
        'use_last_reviewed_version' => 'getUseLastReviewedVersion',
        'locale_ids' => 'getLocaleIds',
        'fallback_locale_id' => 'getFallbackLocaleId',
        'source_locale_id' => 'getSourceLocaleId',
        'custom_metadata_filters' => 'getCustomMetadataFilters'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['file_format'] = isset($data['file_format']) ? $data['file_format'] : null;
        $this->container['branch'] = isset($data['branch']) ? $data['branch'] : null;
        $this->container['tags'] = isset($data['tags']) ? $data['tags'] : null;
        $this->container['include_empty_translations'] = isset($data['include_empty_translations']) ? $data['include_empty_translations'] : null;
        $this->container['exclude_empty_zero_forms'] = isset($data['exclude_empty_zero_forms']) ? $data['exclude_empty_zero_forms'] : null;
        $this->container['include_translated_keys'] = isset($data['include_translated_keys']) ? $data['include_translated_keys'] : null;
        $this->container['keep_notranslate_tags'] = isset($data['keep_notranslate_tags']) ? $data['keep_notranslate_tags'] : null;
        $this->container['format_options'] = isset($data['format_options']) ? $data['format_options'] : null;
        $this->container['encoding'] = isset($data['encoding']) ? $data['encoding'] : null;
        $this->container['include_unverified_translations'] = isset($data['include_unverified_translations']) ? $data['include_unverified_translations'] : null;
        $this->container['use_last_reviewed_version'] = isset($data['use_last_reviewed_version']) ? $data['use_last_reviewed_version'] : null;
        $this->container['locale_ids'] = isset($data['locale_ids']) ? $data['locale_ids'] : null;
        $this->container['fallback_locale_id'] = isset($data['fallback_locale_id']) ? $data['fallback_locale_id'] : null;
        $this->container['source_locale_id'] = isset($data['source_locale_id']) ? $data['source_locale_id'] : null;
        $this->container['custom_metadata_filters'] = isset($data['custom_metadata_filters']) ? $data['custom_metadata_filters'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['file_format'] === null) {
            $invalidProperties[] = "'file_format' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets file_format
     *
     * @return string
     */
    public function getFileFormat()
    {
        return $this->container['file_format'];
    }

    /**
     * Sets file_format
     *
     * @param string $file_format File format name. See the <a href=\"https://support.phrase.com/hc/en-us/sections/6111343326364\">format guide</a> for all supported file formats.
     *
     * @return $this
     */
    public function setFileFormat($file_format)
    {
        $this->container['file_format'] = $file_format;

        return $this;
    }

    /**
     * Gets branch
     *
     * @return string|null
     */
    public function getBranch()
    {
        return $this->container['branch'];
    }

    /**
     * Sets branch
     *
     * @param string|null $branch specify the branch to use
     *
     * @return $this
     */
    public function setBranch($branch)
    {
        $this->container['branch'] = $branch;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return string|null
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param string|null $tags Limit results to keys tagged with a list of comma separated tag names.
     *
     * @return $this
     */
    public function setTags($tags)
    {
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets include_empty_translations
     *
     * @return bool|null
     */
    public function getIncludeEmptyTranslations()
    {
        return $this->container['include_empty_translations'];
    }

    /**
     * Sets include_empty_translations
     *
     * @param bool|null $include_empty_translations Indicates whether keys without translations should be included in the output as well.
     *
     * @return $this
     */
    public function setIncludeEmptyTranslations($include_empty_translations)
    {
        $this->container['include_empty_translations'] = $include_empty_translations;

        return $this;
    }

    /**
     * Gets exclude_empty_zero_forms
     *
     * @return bool|null
     */
    public function getExcludeEmptyZeroForms()
    {
        return $this->container['exclude_empty_zero_forms'];
    }

    /**
     * Sets exclude_empty_zero_forms
     *
     * @param bool|null $exclude_empty_zero_forms Indicates whether zero forms should be included when empty in pluralized keys.
     *
     * @return $this
     */
    public function setExcludeEmptyZeroForms($exclude_empty_zero_forms)
    {
        $this->container['exclude_empty_zero_forms'] = $exclude_empty_zero_forms;

        return $this;
    }

    /**
     * Gets include_translated_keys
     *
     * @return bool|null
     */
    public function getIncludeTranslatedKeys()
    {
        return $this->container['include_translated_keys'];
    }

    /**
     * Sets include_translated_keys
     *
     * @param bool|null $include_translated_keys Include translated keys in the locale file. Use in combination with include_empty_translations to obtain only untranslated keys.
     *
     * @return $this
     */
    public function setIncludeTranslatedKeys($include_translated_keys)
    {
        $this->container['include_translated_keys'] = $include_translated_keys;

        return $this;
    }

    /**
     * Gets keep_notranslate_tags
     *
     * @return bool|null
     */
    public function getKeepNotranslateTags()
    {
        return $this->container['keep_notranslate_tags'];
    }

    /**
     * Sets keep_notranslate_tags
     *
     * @param bool|null $keep_notranslate_tags Indicates whether [NOTRANSLATE] tags should be kept.
     *
     * @return $this
     */
    public function setKeepNotranslateTags($keep_notranslate_tags)
    {
        $this->container['keep_notranslate_tags'] = $keep_notranslate_tags;

        return $this;
    }

    /**
     * Gets format_options
     *
     * @return object|null
     */
    public function getFormatOptions()
    {
        return $this->container['format_options'];
    }

    /**
     * Sets format_options
     *
     * @param object|null $format_options Additional formatting and render options. See the <a href=\"https://support.phrase.com/hc/en-us/sections/6111343326364\">format guide</a> for a list of options available for each format. Specify format options like this: <code>...&format_options[foo]=bar</code>
     *
     * @return $this
     */
    public function setFormatOptions($format_options)
    {
        $this->container['format_options'] = $format_options;

        return $this;
    }

    /**
     * Gets encoding
     *
     * @return string|null
     */
    public function getEncoding()
    {
        return $this->container['encoding'];
    }

    /**
     * Sets encoding
     *
     * @param string|null $encoding Enforces a specific encoding on the file contents. Valid options are \"UTF-8\", \"UTF-16\" and \"ISO-8859-1\".
     *
     * @return $this
     */
    public function setEncoding($encoding)
    {
        $this->container['encoding'] = $encoding;

        return $this;
    }

    /**
     * Gets include_unverified_translations
     *
     * @return bool|null
     */
    public function getIncludeUnverifiedTranslations()
    {
        return $this->container['include_unverified_translations'];
    }

    /**
     * Sets include_unverified_translations
     *
     * @param bool|null $include_unverified_translations if set to false unverified translations are excluded
     *
     * @return $this
     */
    public function setIncludeUnverifiedTranslations($include_unverified_translations)
    {
        $this->container['include_unverified_translations'] = $include_unverified_translations;

        return $this;
    }

    /**
     * Gets use_last_reviewed_version
     *
     * @return bool|null
     */
    public function getUseLastReviewedVersion()
    {
        return $this->container['use_last_reviewed_version'];
    }

    /**
     * Sets use_last_reviewed_version
     *
     * @param bool|null $use_last_reviewed_version If set to true the last reviewed version of a translation is used. This is only available if the review workflow is enabled for the project.
     *
     * @return $this
     */
    public function setUseLastReviewedVersion($use_last_reviewed_version)
    {
        $this->container['use_last_reviewed_version'] = $use_last_reviewed_version;

        return $this;
    }

    /**
     * Gets locale_ids
     *
     * @return string[]|null
     */
    public function getLocaleIds()
    {
        return $this->container['locale_ids'];
    }

    /**
     * Sets locale_ids
     *
     * @param string[]|null $locale_ids Locale IDs or locale names
     *
     * @return $this
     */
    public function setLocaleIds($locale_ids)
    {
        $this->container['locale_ids'] = $locale_ids;

        return $this;
    }

    /**
     * Gets fallback_locale_id
     *
     * @return string|null
     */
    public function getFallbackLocaleId()
    {
        return $this->container['fallback_locale_id'];
    }

    /**
     * Sets fallback_locale_id
     *
     * @param string|null $fallback_locale_id If a key has no translation in the locale being downloaded the translation in the fallback locale will be used. Provide the ID of the locale that should be used as the fallback. Requires include_empty_translations to be set to <code>true</code>.
     *
     * @return $this
     */
    public function setFallbackLocaleId($fallback_locale_id)
    {
        $this->container['fallback_locale_id'] = $fallback_locale_id;

        return $this;
    }

    /**
     * Gets source_locale_id
     *
     * @return string|null
     */
    public function getSourceLocaleId()
    {
        return $this->container['source_locale_id'];
    }

    /**
     * Sets source_locale_id
     *
     * @param string|null $source_locale_id Provides the source language of a corresponding job as the source language of the generated locale file. This parameter will be ignored unless used in combination with a <code>tag</code> parameter indicating a specific job.
     *
     * @return $this
     */
    public function setSourceLocaleId($source_locale_id)
    {
        $this->container['source_locale_id'] = $source_locale_id;

        return $this;
    }

    /**
     * Gets custom_metadata_filters
     *
     * @return object|null
     */
    public function getCustomMetadataFilters()
    {
        return $this->container['custom_metadata_filters'];
    }

    /**
     * Sets custom_metadata_filters
     *
     * @param object|null $custom_metadata_filters Custom metadata filters. Provide the name of the metadata field and the value to filter by. Only keys with matching metadata will be included in the download.
     *
     * @return $this
     */
    public function setCustomMetadataFilters($custom_metadata_filters)
    {
        $this->container['custom_metadata_filters'] = $custom_metadata_filters;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


