<?php
/**
 * AutomationsCreateParameters1
 *
 * PHP version 5
 *
 * @category Class
 * @package  Phrase
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Phrase Strings API Reference
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@phrase.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Phrase\Model;

use \ArrayAccess;
use \Phrase\ObjectSerializer;

/**
 * AutomationsCreateParameters1 Class Doc Comment
 *
 * @category Class
 * @package  Phrase
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class AutomationsCreateParameters1 implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'automations_create_parameters_1';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'trigger' => 'string',
        'project_ids' => 'string[]',
        'job_template_id' => 'string',
        'status_filters' => 'string[]',
        'tags' => 'string[]',
        'cron_schedule' => 'string',
        'time_zone' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'name' => null,
        'trigger' => null,
        'project_ids' => null,
        'job_template_id' => null,
        'status_filters' => null,
        'tags' => null,
        'cron_schedule' => null,
        'time_zone' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'trigger' => 'trigger',
        'project_ids' => 'project_ids',
        'job_template_id' => 'job_template_id',
        'status_filters' => 'status_filters',
        'tags' => 'tags',
        'cron_schedule' => 'cron_schedule',
        'time_zone' => 'time_zone'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'trigger' => 'setTrigger',
        'project_ids' => 'setProjectIds',
        'job_template_id' => 'setJobTemplateId',
        'status_filters' => 'setStatusFilters',
        'tags' => 'setTags',
        'cron_schedule' => 'setCronSchedule',
        'time_zone' => 'setTimeZone'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'trigger' => 'getTrigger',
        'project_ids' => 'getProjectIds',
        'job_template_id' => 'getJobTemplateId',
        'status_filters' => 'getStatusFilters',
        'tags' => 'getTags',
        'cron_schedule' => 'getCronSchedule',
        'time_zone' => 'getTimeZone'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const TRIGGER_SCHEDULE = 'schedule';
    const TRIGGER_UPLOAD = 'upload';
    const STATUS_FILTERS_UNVERIFIED = 'unverified';
    const STATUS_FILTERS_UNTRANSLATED = 'untranslated';
    const STATUS_FILTERS_READY_FOR_REVIEW = 'ready_for_review';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTriggerAllowableValues()
    {
        return [
            self::TRIGGER_SCHEDULE,
            self::TRIGGER_UPLOAD,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusFiltersAllowableValues()
    {
        return [
            self::STATUS_FILTERS_UNVERIFIED,
            self::STATUS_FILTERS_UNTRANSLATED,
            self::STATUS_FILTERS_READY_FOR_REVIEW,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['trigger'] = isset($data['trigger']) ? $data['trigger'] : null;
        $this->container['project_ids'] = isset($data['project_ids']) ? $data['project_ids'] : null;
        $this->container['job_template_id'] = isset($data['job_template_id']) ? $data['job_template_id'] : null;
        $this->container['status_filters'] = isset($data['status_filters']) ? $data['status_filters'] : null;
        $this->container['tags'] = isset($data['tags']) ? $data['tags'] : null;
        $this->container['cron_schedule'] = isset($data['cron_schedule']) ? $data['cron_schedule'] : null;
        $this->container['time_zone'] = isset($data['time_zone']) ? $data['time_zone'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['trigger'] === null) {
            $invalidProperties[] = "'trigger' can't be null";
        }
        $allowedValues = $this->getTriggerAllowableValues();
        if (!is_null($this->container['trigger']) && !in_array($this->container['trigger'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'trigger', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['project_ids'] === null) {
            $invalidProperties[] = "'project_ids' can't be null";
        }
        if ($this->container['status_filters'] === null) {
            $invalidProperties[] = "'status_filters' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name of the automation
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets trigger
     *
     * @return string
     */
    public function getTrigger()
    {
        return $this->container['trigger'];
    }

    /**
     * Sets trigger
     *
     * @param string $trigger trigger
     *
     * @return $this
     */
    public function setTrigger($trigger)
    {
        $allowedValues = $this->getTriggerAllowableValues();
        if (!in_array($trigger, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'trigger', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['trigger'] = $trigger;

        return $this;
    }

    /**
     * Gets project_ids
     *
     * @return string[]
     */
    public function getProjectIds()
    {
        return $this->container['project_ids'];
    }

    /**
     * Sets project_ids
     *
     * @param string[] $project_ids List of project IDs to associate with the automation. Currently, only the first ID in the array is used. The array format leaves room for future support of multiple projects.
     *
     * @return $this
     */
    public function setProjectIds($project_ids)
    {
        $this->container['project_ids'] = $project_ids;

        return $this;
    }

    /**
     * Gets job_template_id
     *
     * @return string|null
     */
    public function getJobTemplateId()
    {
        return $this->container['job_template_id'];
    }

    /**
     * Sets job_template_id
     *
     * @param string|null $job_template_id id of job template that the automation uses to create jobs from
     *
     * @return $this
     */
    public function setJobTemplateId($job_template_id)
    {
        $this->container['job_template_id'] = $job_template_id;

        return $this;
    }

    /**
     * Gets status_filters
     *
     * @return string[]
     */
    public function getStatusFilters()
    {
        return $this->container['status_filters'];
    }

    /**
     * Sets status_filters
     *
     * @param string[] $status_filters translation key statuses used to filter keys that are added to jobs
     *
     * @return $this
     */
    public function setStatusFilters($status_filters)
    {
        $allowedValues = $this->getStatusFiltersAllowableValues();
        if (array_diff($status_filters, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'status_filters', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status_filters'] = $status_filters;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return string[]|null
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param string[]|null $tags used to filter which keys are added to jobs
     *
     * @return $this
     */
    public function setTags($tags)
    {
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets cron_schedule
     *
     * @return string|null
     */
    public function getCronSchedule()
    {
        return $this->container['cron_schedule'];
    }

    /**
     * Sets cron_schedule
     *
     * @param string|null $cron_schedule along with time_zone, specifies when the scheduled automation is supposed to run
     *
     * @return $this
     */
    public function setCronSchedule($cron_schedule)
    {
        $this->container['cron_schedule'] = $cron_schedule;

        return $this;
    }

    /**
     * Gets time_zone
     *
     * @return string|null
     */
    public function getTimeZone()
    {
        return $this->container['time_zone'];
    }

    /**
     * Sets time_zone
     *
     * @param string|null $time_zone along with cron_schedule, specifies when the scheduled automation is supposed to run
     *
     * @return $this
     */
    public function setTimeZone($time_zone)
    {
        $this->container['time_zone'] = $time_zone;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


