<?php
/**
 * JobLocalesCreateParameters
 *
 * PHP version 5
 *
 * @category Class
 * @package  Phrase
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Phrase Strings API Reference
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@phrase.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Phrase\Model;

use \ArrayAccess;
use \Phrase\ObjectSerializer;

/**
 * JobLocalesCreateParameters Class Doc Comment
 *
 * @category Class
 * @package  Phrase
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class JobLocalesCreateParameters implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'job_locales_create_parameters';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'branch' => 'string',
        'locale_id' => 'string',
        'user_ids' => 'string[]',
        'reviewer_ids' => 'string[]',
        'translator_team_ids' => 'string[]',
        'reviewer_team_ids' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'branch' => null,
        'locale_id' => null,
        'user_ids' => null,
        'reviewer_ids' => null,
        'translator_team_ids' => null,
        'reviewer_team_ids' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'branch' => 'branch',
        'locale_id' => 'locale_id',
        'user_ids' => 'user_ids',
        'reviewer_ids' => 'reviewer_ids',
        'translator_team_ids' => 'translator_team_ids',
        'reviewer_team_ids' => 'reviewer_team_ids'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'branch' => 'setBranch',
        'locale_id' => 'setLocaleId',
        'user_ids' => 'setUserIds',
        'reviewer_ids' => 'setReviewerIds',
        'translator_team_ids' => 'setTranslatorTeamIds',
        'reviewer_team_ids' => 'setReviewerTeamIds'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'branch' => 'getBranch',
        'locale_id' => 'getLocaleId',
        'user_ids' => 'getUserIds',
        'reviewer_ids' => 'getReviewerIds',
        'translator_team_ids' => 'getTranslatorTeamIds',
        'reviewer_team_ids' => 'getReviewerTeamIds'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['branch'] = isset($data['branch']) ? $data['branch'] : null;
        $this->container['locale_id'] = isset($data['locale_id']) ? $data['locale_id'] : null;
        $this->container['user_ids'] = isset($data['user_ids']) ? $data['user_ids'] : null;
        $this->container['reviewer_ids'] = isset($data['reviewer_ids']) ? $data['reviewer_ids'] : null;
        $this->container['translator_team_ids'] = isset($data['translator_team_ids']) ? $data['translator_team_ids'] : null;
        $this->container['reviewer_team_ids'] = isset($data['reviewer_team_ids']) ? $data['reviewer_team_ids'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['locale_id'] === null) {
            $invalidProperties[] = "'locale_id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets branch
     *
     * @return string|null
     */
    public function getBranch()
    {
        return $this->container['branch'];
    }

    /**
     * Sets branch
     *
     * @param string|null $branch specify the branch to use
     *
     * @return $this
     */
    public function setBranch($branch)
    {
        $this->container['branch'] = $branch;

        return $this;
    }

    /**
     * Gets locale_id
     *
     * @return string
     */
    public function getLocaleId()
    {
        return $this->container['locale_id'];
    }

    /**
     * Sets locale_id
     *
     * @param string $locale_id locale id
     *
     * @return $this
     */
    public function setLocaleId($locale_id)
    {
        $this->container['locale_id'] = $locale_id;

        return $this;
    }

    /**
     * Gets user_ids
     *
     * @return string[]|null
     */
    public function getUserIds()
    {
        return $this->container['user_ids'];
    }

    /**
     * Sets user_ids
     *
     * @param string[]|null $user_ids Array of user ids to be assigned to the job locale as translators
     *
     * @return $this
     */
    public function setUserIds($user_ids)
    {
        $this->container['user_ids'] = $user_ids;

        return $this;
    }

    /**
     * Gets reviewer_ids
     *
     * @return string[]|null
     */
    public function getReviewerIds()
    {
        return $this->container['reviewer_ids'];
    }

    /**
     * Sets reviewer_ids
     *
     * @param string[]|null $reviewer_ids Array of reviewer ids to be assigned to the job locale as reviewers
     *
     * @return $this
     */
    public function setReviewerIds($reviewer_ids)
    {
        $this->container['reviewer_ids'] = $reviewer_ids;

        return $this;
    }

    /**
     * Gets translator_team_ids
     *
     * @return string[]|null
     */
    public function getTranslatorTeamIds()
    {
        return $this->container['translator_team_ids'];
    }

    /**
     * Sets translator_team_ids
     *
     * @param string[]|null $translator_team_ids Array of team ids to be assigned to the job locale as translators
     *
     * @return $this
     */
    public function setTranslatorTeamIds($translator_team_ids)
    {
        $this->container['translator_team_ids'] = $translator_team_ids;

        return $this;
    }

    /**
     * Gets reviewer_team_ids
     *
     * @return string[]|null
     */
    public function getReviewerTeamIds()
    {
        return $this->container['reviewer_team_ids'];
    }

    /**
     * Sets reviewer_team_ids
     *
     * @param string[]|null $reviewer_team_ids Array of team ids to be assigned to the job locale as reviewers
     *
     * @return $this
     */
    public function setReviewerTeamIds($reviewer_team_ids)
    {
        $this->container['reviewer_team_ids'] = $reviewer_team_ids;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


