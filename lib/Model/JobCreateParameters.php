<?php
/**
 * JobCreateParameters
 *
 * PHP version 5
 *
 * @category Class
 * @package  Phrase
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Phrase Strings API Reference
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@phrase.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Phrase\Model;

use \ArrayAccess;
use \Phrase\ObjectSerializer;

/**
 * JobCreateParameters Class Doc Comment
 *
 * @category Class
 * @package  Phrase
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class JobCreateParameters implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'job_create_parameters';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'branch' => 'string',
        'name' => 'string',
        'source_locale_id' => 'string',
        'briefing' => 'string',
        'due_date' => '\DateTime',
        'ticket_url' => 'string',
        'tags' => 'string[]',
        'translation_key_ids' => 'string[]',
        'job_template_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'branch' => null,
        'name' => null,
        'source_locale_id' => null,
        'briefing' => null,
        'due_date' => 'date-time',
        'ticket_url' => null,
        'tags' => null,
        'translation_key_ids' => null,
        'job_template_id' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'branch' => 'branch',
        'name' => 'name',
        'source_locale_id' => 'source_locale_id',
        'briefing' => 'briefing',
        'due_date' => 'due_date',
        'ticket_url' => 'ticket_url',
        'tags' => 'tags',
        'translation_key_ids' => 'translation_key_ids',
        'job_template_id' => 'job_template_id'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'branch' => 'setBranch',
        'name' => 'setName',
        'source_locale_id' => 'setSourceLocaleId',
        'briefing' => 'setBriefing',
        'due_date' => 'setDueDate',
        'ticket_url' => 'setTicketUrl',
        'tags' => 'setTags',
        'translation_key_ids' => 'setTranslationKeyIds',
        'job_template_id' => 'setJobTemplateId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'branch' => 'getBranch',
        'name' => 'getName',
        'source_locale_id' => 'getSourceLocaleId',
        'briefing' => 'getBriefing',
        'due_date' => 'getDueDate',
        'ticket_url' => 'getTicketUrl',
        'tags' => 'getTags',
        'translation_key_ids' => 'getTranslationKeyIds',
        'job_template_id' => 'getJobTemplateId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['branch'] = isset($data['branch']) ? $data['branch'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['source_locale_id'] = isset($data['source_locale_id']) ? $data['source_locale_id'] : null;
        $this->container['briefing'] = isset($data['briefing']) ? $data['briefing'] : null;
        $this->container['due_date'] = isset($data['due_date']) ? $data['due_date'] : null;
        $this->container['ticket_url'] = isset($data['ticket_url']) ? $data['ticket_url'] : null;
        $this->container['tags'] = isset($data['tags']) ? $data['tags'] : null;
        $this->container['translation_key_ids'] = isset($data['translation_key_ids']) ? $data['translation_key_ids'] : null;
        $this->container['job_template_id'] = isset($data['job_template_id']) ? $data['job_template_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets branch
     *
     * @return string|null
     */
    public function getBranch()
    {
        return $this->container['branch'];
    }

    /**
     * Sets branch
     *
     * @param string|null $branch specify the branch to use
     *
     * @return $this
     */
    public function setBranch($branch)
    {
        $this->container['branch'] = $branch;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Job name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets source_locale_id
     *
     * @return string|null
     */
    public function getSourceLocaleId()
    {
        return $this->container['source_locale_id'];
    }

    /**
     * Sets source_locale_id
     *
     * @param string|null $source_locale_id The API id of the source language
     *
     * @return $this
     */
    public function setSourceLocaleId($source_locale_id)
    {
        $this->container['source_locale_id'] = $source_locale_id;

        return $this;
    }

    /**
     * Gets briefing
     *
     * @return string|null
     */
    public function getBriefing()
    {
        return $this->container['briefing'];
    }

    /**
     * Sets briefing
     *
     * @param string|null $briefing Briefing for the translators
     *
     * @return $this
     */
    public function setBriefing($briefing)
    {
        $this->container['briefing'] = $briefing;

        return $this;
    }

    /**
     * Gets due_date
     *
     * @return \DateTime|null
     */
    public function getDueDate()
    {
        return $this->container['due_date'];
    }

    /**
     * Sets due_date
     *
     * @param \DateTime|null $due_date Date the job should be finished
     *
     * @return $this
     */
    public function setDueDate($due_date)
    {
        $this->container['due_date'] = $due_date;

        return $this;
    }

    /**
     * Gets ticket_url
     *
     * @return string|null
     */
    public function getTicketUrl()
    {
        return $this->container['ticket_url'];
    }

    /**
     * Sets ticket_url
     *
     * @param string|null $ticket_url URL to a ticket for this job (e.g. Jira, Trello)
     *
     * @return $this
     */
    public function setTicketUrl($ticket_url)
    {
        $this->container['ticket_url'] = $ticket_url;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return string[]|null
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param string[]|null $tags tags of keys that should be included within the job
     *
     * @return $this
     */
    public function setTags($tags)
    {
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets translation_key_ids
     *
     * @return string[]|null
     */
    public function getTranslationKeyIds()
    {
        return $this->container['translation_key_ids'];
    }

    /**
     * Sets translation_key_ids
     *
     * @param string[]|null $translation_key_ids ids of keys that should be included within the job
     *
     * @return $this
     */
    public function setTranslationKeyIds($translation_key_ids)
    {
        $this->container['translation_key_ids'] = $translation_key_ids;

        return $this;
    }

    /**
     * Gets job_template_id
     *
     * @return string|null
     */
    public function getJobTemplateId()
    {
        return $this->container['job_template_id'];
    }

    /**
     * Sets job_template_id
     *
     * @param string|null $job_template_id id of a job template you would like to model the created job after. Any manually added parameters will take preference over template attributes.
     *
     * @return $this
     */
    public function setJobTemplateId($job_template_id)
    {
        $this->container['job_template_id'] = $job_template_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


