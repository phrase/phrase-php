<?php
/**
 * LocaleReport
 *
 * PHP version 5
 *
 * @category Class
 * @package  Phrase
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Phrase Strings API Reference
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@phrase.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Phrase\Model;

use \ArrayAccess;
use \Phrase\ObjectSerializer;

/**
 * LocaleReport Class Doc Comment
 *
 * @category Class
 * @package  Phrase
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class LocaleReport implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'locale_report';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'keys_count' => 'int',
        'translated_translations_percentage' => 'int',
        'unverified_translations_percentage' => 'int',
        'reviewed_translations_percentage' => 'int',
        'untranslated_keys_percentage' => 'int',
        'completed_translations_count' => 'int',
        'untranslated_keys_count' => 'int',
        'unverified_translations_count' => 'int',
        'reviewed_translations_count' => 'int',
        'source_word_count' => 'int',
        'word_count' => 'int',
        'word_count_unverified' => 'int',
        'word_count_missing' => 'int',
        'locale' => '\Phrase\Model\LocalePreview'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'keys_count' => null,
        'translated_translations_percentage' => null,
        'unverified_translations_percentage' => null,
        'reviewed_translations_percentage' => null,
        'untranslated_keys_percentage' => null,
        'completed_translations_count' => null,
        'untranslated_keys_count' => null,
        'unverified_translations_count' => null,
        'reviewed_translations_count' => null,
        'source_word_count' => null,
        'word_count' => null,
        'word_count_unverified' => null,
        'word_count_missing' => null,
        'locale' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'keys_count' => 'keys_count',
        'translated_translations_percentage' => 'translated_translations_percentage',
        'unverified_translations_percentage' => 'unverified_translations_percentage',
        'reviewed_translations_percentage' => 'reviewed_translations_percentage',
        'untranslated_keys_percentage' => 'untranslated_keys_percentage',
        'completed_translations_count' => 'completed_translations_count',
        'untranslated_keys_count' => 'untranslated_keys_count',
        'unverified_translations_count' => 'unverified_translations_count',
        'reviewed_translations_count' => 'reviewed_translations_count',
        'source_word_count' => 'source_word_count',
        'word_count' => 'word_count',
        'word_count_unverified' => 'word_count_unverified',
        'word_count_missing' => 'word_count_missing',
        'locale' => 'locale'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'keys_count' => 'setKeysCount',
        'translated_translations_percentage' => 'setTranslatedTranslationsPercentage',
        'unverified_translations_percentage' => 'setUnverifiedTranslationsPercentage',
        'reviewed_translations_percentage' => 'setReviewedTranslationsPercentage',
        'untranslated_keys_percentage' => 'setUntranslatedKeysPercentage',
        'completed_translations_count' => 'setCompletedTranslationsCount',
        'untranslated_keys_count' => 'setUntranslatedKeysCount',
        'unverified_translations_count' => 'setUnverifiedTranslationsCount',
        'reviewed_translations_count' => 'setReviewedTranslationsCount',
        'source_word_count' => 'setSourceWordCount',
        'word_count' => 'setWordCount',
        'word_count_unverified' => 'setWordCountUnverified',
        'word_count_missing' => 'setWordCountMissing',
        'locale' => 'setLocale'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'keys_count' => 'getKeysCount',
        'translated_translations_percentage' => 'getTranslatedTranslationsPercentage',
        'unverified_translations_percentage' => 'getUnverifiedTranslationsPercentage',
        'reviewed_translations_percentage' => 'getReviewedTranslationsPercentage',
        'untranslated_keys_percentage' => 'getUntranslatedKeysPercentage',
        'completed_translations_count' => 'getCompletedTranslationsCount',
        'untranslated_keys_count' => 'getUntranslatedKeysCount',
        'unverified_translations_count' => 'getUnverifiedTranslationsCount',
        'reviewed_translations_count' => 'getReviewedTranslationsCount',
        'source_word_count' => 'getSourceWordCount',
        'word_count' => 'getWordCount',
        'word_count_unverified' => 'getWordCountUnverified',
        'word_count_missing' => 'getWordCountMissing',
        'locale' => 'getLocale'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['keys_count'] = isset($data['keys_count']) ? $data['keys_count'] : null;
        $this->container['translated_translations_percentage'] = isset($data['translated_translations_percentage']) ? $data['translated_translations_percentage'] : null;
        $this->container['unverified_translations_percentage'] = isset($data['unverified_translations_percentage']) ? $data['unverified_translations_percentage'] : null;
        $this->container['reviewed_translations_percentage'] = isset($data['reviewed_translations_percentage']) ? $data['reviewed_translations_percentage'] : null;
        $this->container['untranslated_keys_percentage'] = isset($data['untranslated_keys_percentage']) ? $data['untranslated_keys_percentage'] : null;
        $this->container['completed_translations_count'] = isset($data['completed_translations_count']) ? $data['completed_translations_count'] : null;
        $this->container['untranslated_keys_count'] = isset($data['untranslated_keys_count']) ? $data['untranslated_keys_count'] : null;
        $this->container['unverified_translations_count'] = isset($data['unverified_translations_count']) ? $data['unverified_translations_count'] : null;
        $this->container['reviewed_translations_count'] = isset($data['reviewed_translations_count']) ? $data['reviewed_translations_count'] : null;
        $this->container['source_word_count'] = isset($data['source_word_count']) ? $data['source_word_count'] : null;
        $this->container['word_count'] = isset($data['word_count']) ? $data['word_count'] : null;
        $this->container['word_count_unverified'] = isset($data['word_count_unverified']) ? $data['word_count_unverified'] : null;
        $this->container['word_count_missing'] = isset($data['word_count_missing']) ? $data['word_count_missing'] : null;
        $this->container['locale'] = isset($data['locale']) ? $data['locale'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets keys_count
     *
     * @return int|null
     */
    public function getKeysCount()
    {
        return $this->container['keys_count'];
    }

    /**
     * Sets keys_count
     *
     * @param int|null $keys_count keys_count
     *
     * @return $this
     */
    public function setKeysCount($keys_count)
    {
        $this->container['keys_count'] = $keys_count;

        return $this;
    }

    /**
     * Gets translated_translations_percentage
     *
     * @return int|null
     */
    public function getTranslatedTranslationsPercentage()
    {
        return $this->container['translated_translations_percentage'];
    }

    /**
     * Sets translated_translations_percentage
     *
     * @param int|null $translated_translations_percentage translated_translations_percentage
     *
     * @return $this
     */
    public function setTranslatedTranslationsPercentage($translated_translations_percentage)
    {
        $this->container['translated_translations_percentage'] = $translated_translations_percentage;

        return $this;
    }

    /**
     * Gets unverified_translations_percentage
     *
     * @return int|null
     */
    public function getUnverifiedTranslationsPercentage()
    {
        return $this->container['unverified_translations_percentage'];
    }

    /**
     * Sets unverified_translations_percentage
     *
     * @param int|null $unverified_translations_percentage unverified_translations_percentage
     *
     * @return $this
     */
    public function setUnverifiedTranslationsPercentage($unverified_translations_percentage)
    {
        $this->container['unverified_translations_percentage'] = $unverified_translations_percentage;

        return $this;
    }

    /**
     * Gets reviewed_translations_percentage
     *
     * @return int|null
     */
    public function getReviewedTranslationsPercentage()
    {
        return $this->container['reviewed_translations_percentage'];
    }

    /**
     * Sets reviewed_translations_percentage
     *
     * @param int|null $reviewed_translations_percentage reviewed_translations_percentage
     *
     * @return $this
     */
    public function setReviewedTranslationsPercentage($reviewed_translations_percentage)
    {
        $this->container['reviewed_translations_percentage'] = $reviewed_translations_percentage;

        return $this;
    }

    /**
     * Gets untranslated_keys_percentage
     *
     * @return int|null
     */
    public function getUntranslatedKeysPercentage()
    {
        return $this->container['untranslated_keys_percentage'];
    }

    /**
     * Sets untranslated_keys_percentage
     *
     * @param int|null $untranslated_keys_percentage untranslated_keys_percentage
     *
     * @return $this
     */
    public function setUntranslatedKeysPercentage($untranslated_keys_percentage)
    {
        $this->container['untranslated_keys_percentage'] = $untranslated_keys_percentage;

        return $this;
    }

    /**
     * Gets completed_translations_count
     *
     * @return int|null
     */
    public function getCompletedTranslationsCount()
    {
        return $this->container['completed_translations_count'];
    }

    /**
     * Sets completed_translations_count
     *
     * @param int|null $completed_translations_count completed_translations_count
     *
     * @return $this
     */
    public function setCompletedTranslationsCount($completed_translations_count)
    {
        $this->container['completed_translations_count'] = $completed_translations_count;

        return $this;
    }

    /**
     * Gets untranslated_keys_count
     *
     * @return int|null
     */
    public function getUntranslatedKeysCount()
    {
        return $this->container['untranslated_keys_count'];
    }

    /**
     * Sets untranslated_keys_count
     *
     * @param int|null $untranslated_keys_count untranslated_keys_count
     *
     * @return $this
     */
    public function setUntranslatedKeysCount($untranslated_keys_count)
    {
        $this->container['untranslated_keys_count'] = $untranslated_keys_count;

        return $this;
    }

    /**
     * Gets unverified_translations_count
     *
     * @return int|null
     */
    public function getUnverifiedTranslationsCount()
    {
        return $this->container['unverified_translations_count'];
    }

    /**
     * Sets unverified_translations_count
     *
     * @param int|null $unverified_translations_count unverified_translations_count
     *
     * @return $this
     */
    public function setUnverifiedTranslationsCount($unverified_translations_count)
    {
        $this->container['unverified_translations_count'] = $unverified_translations_count;

        return $this;
    }

    /**
     * Gets reviewed_translations_count
     *
     * @return int|null
     */
    public function getReviewedTranslationsCount()
    {
        return $this->container['reviewed_translations_count'];
    }

    /**
     * Sets reviewed_translations_count
     *
     * @param int|null $reviewed_translations_count reviewed_translations_count
     *
     * @return $this
     */
    public function setReviewedTranslationsCount($reviewed_translations_count)
    {
        $this->container['reviewed_translations_count'] = $reviewed_translations_count;

        return $this;
    }

    /**
     * Gets source_word_count
     *
     * @return int|null
     */
    public function getSourceWordCount()
    {
        return $this->container['source_word_count'];
    }

    /**
     * Sets source_word_count
     *
     * @param int|null $source_word_count source_word_count
     *
     * @return $this
     */
    public function setSourceWordCount($source_word_count)
    {
        $this->container['source_word_count'] = $source_word_count;

        return $this;
    }

    /**
     * Gets word_count
     *
     * @return int|null
     */
    public function getWordCount()
    {
        return $this->container['word_count'];
    }

    /**
     * Sets word_count
     *
     * @param int|null $word_count word_count
     *
     * @return $this
     */
    public function setWordCount($word_count)
    {
        $this->container['word_count'] = $word_count;

        return $this;
    }

    /**
     * Gets word_count_unverified
     *
     * @return int|null
     */
    public function getWordCountUnverified()
    {
        return $this->container['word_count_unverified'];
    }

    /**
     * Sets word_count_unverified
     *
     * @param int|null $word_count_unverified word_count_unverified
     *
     * @return $this
     */
    public function setWordCountUnverified($word_count_unverified)
    {
        $this->container['word_count_unverified'] = $word_count_unverified;

        return $this;
    }

    /**
     * Gets word_count_missing
     *
     * @return int|null
     */
    public function getWordCountMissing()
    {
        return $this->container['word_count_missing'];
    }

    /**
     * Sets word_count_missing
     *
     * @param int|null $word_count_missing word_count_missing
     *
     * @return $this
     */
    public function setWordCountMissing($word_count_missing)
    {
        $this->container['word_count_missing'] = $word_count_missing;

        return $this;
    }

    /**
     * Gets locale
     *
     * @return \Phrase\Model\LocalePreview|null
     */
    public function getLocale()
    {
        return $this->container['locale'];
    }

    /**
     * Sets locale
     *
     * @param \Phrase\Model\LocalePreview|null $locale locale
     *
     * @return $this
     */
    public function setLocale($locale)
    {
        $this->container['locale'] = $locale;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


