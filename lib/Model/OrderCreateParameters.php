<?php
/**
 * OrderCreateParameters
 *
 * PHP version 5
 *
 * @category Class
 * @package  Phrase
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Phrase Strings API Reference
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@phrase.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Phrase\Model;

use \ArrayAccess;
use \Phrase\ObjectSerializer;

/**
 * OrderCreateParameters Class Doc Comment
 *
 * @category Class
 * @package  Phrase
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class OrderCreateParameters implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'order_create_parameters';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'branch' => 'string',
        'name' => 'string',
        'lsp' => 'string',
        'source_locale_id' => 'string',
        'target_locale_ids' => 'string[]',
        'translation_type' => 'string',
        'tag' => 'string',
        'message' => 'string',
        'styleguide_id' => 'string',
        'unverify_translations_upon_delivery' => 'bool',
        'include_untranslated_keys' => 'bool',
        'include_unverified_translations' => 'bool',
        'category' => 'string',
        'quality' => 'bool',
        'priority' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'branch' => null,
        'name' => null,
        'lsp' => null,
        'source_locale_id' => null,
        'target_locale_ids' => null,
        'translation_type' => null,
        'tag' => null,
        'message' => null,
        'styleguide_id' => null,
        'unverify_translations_upon_delivery' => null,
        'include_untranslated_keys' => null,
        'include_unverified_translations' => null,
        'category' => null,
        'quality' => null,
        'priority' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'branch' => 'branch',
        'name' => 'name',
        'lsp' => 'lsp',
        'source_locale_id' => 'source_locale_id',
        'target_locale_ids' => 'target_locale_ids',
        'translation_type' => 'translation_type',
        'tag' => 'tag',
        'message' => 'message',
        'styleguide_id' => 'styleguide_id',
        'unverify_translations_upon_delivery' => 'unverify_translations_upon_delivery',
        'include_untranslated_keys' => 'include_untranslated_keys',
        'include_unverified_translations' => 'include_unverified_translations',
        'category' => 'category',
        'quality' => 'quality',
        'priority' => 'priority'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'branch' => 'setBranch',
        'name' => 'setName',
        'lsp' => 'setLsp',
        'source_locale_id' => 'setSourceLocaleId',
        'target_locale_ids' => 'setTargetLocaleIds',
        'translation_type' => 'setTranslationType',
        'tag' => 'setTag',
        'message' => 'setMessage',
        'styleguide_id' => 'setStyleguideId',
        'unverify_translations_upon_delivery' => 'setUnverifyTranslationsUponDelivery',
        'include_untranslated_keys' => 'setIncludeUntranslatedKeys',
        'include_unverified_translations' => 'setIncludeUnverifiedTranslations',
        'category' => 'setCategory',
        'quality' => 'setQuality',
        'priority' => 'setPriority'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'branch' => 'getBranch',
        'name' => 'getName',
        'lsp' => 'getLsp',
        'source_locale_id' => 'getSourceLocaleId',
        'target_locale_ids' => 'getTargetLocaleIds',
        'translation_type' => 'getTranslationType',
        'tag' => 'getTag',
        'message' => 'getMessage',
        'styleguide_id' => 'getStyleguideId',
        'unverify_translations_upon_delivery' => 'getUnverifyTranslationsUponDelivery',
        'include_untranslated_keys' => 'getIncludeUntranslatedKeys',
        'include_unverified_translations' => 'getIncludeUnverifiedTranslations',
        'category' => 'getCategory',
        'quality' => 'getQuality',
        'priority' => 'getPriority'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['branch'] = isset($data['branch']) ? $data['branch'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['lsp'] = isset($data['lsp']) ? $data['lsp'] : null;
        $this->container['source_locale_id'] = isset($data['source_locale_id']) ? $data['source_locale_id'] : null;
        $this->container['target_locale_ids'] = isset($data['target_locale_ids']) ? $data['target_locale_ids'] : null;
        $this->container['translation_type'] = isset($data['translation_type']) ? $data['translation_type'] : null;
        $this->container['tag'] = isset($data['tag']) ? $data['tag'] : null;
        $this->container['message'] = isset($data['message']) ? $data['message'] : null;
        $this->container['styleguide_id'] = isset($data['styleguide_id']) ? $data['styleguide_id'] : null;
        $this->container['unverify_translations_upon_delivery'] = isset($data['unverify_translations_upon_delivery']) ? $data['unverify_translations_upon_delivery'] : null;
        $this->container['include_untranslated_keys'] = isset($data['include_untranslated_keys']) ? $data['include_untranslated_keys'] : null;
        $this->container['include_unverified_translations'] = isset($data['include_unverified_translations']) ? $data['include_unverified_translations'] : null;
        $this->container['category'] = isset($data['category']) ? $data['category'] : null;
        $this->container['quality'] = isset($data['quality']) ? $data['quality'] : null;
        $this->container['priority'] = isset($data['priority']) ? $data['priority'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets branch
     *
     * @return string|null
     */
    public function getBranch()
    {
        return $this->container['branch'];
    }

    /**
     * Sets branch
     *
     * @param string|null $branch specify the branch to use
     *
     * @return $this
     */
    public function setBranch($branch)
    {
        $this->container['branch'] = $branch;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name the name of the order, default name is: Translation order from 'current datetime'
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets lsp
     *
     * @return string|null
     */
    public function getLsp()
    {
        return $this->container['lsp'];
    }

    /**
     * Sets lsp
     *
     * @param string|null $lsp Name of the LSP that should process this order. Can be one of gengo, textmaster.
     *
     * @return $this
     */
    public function setLsp($lsp)
    {
        $this->container['lsp'] = $lsp;

        return $this;
    }

    /**
     * Gets source_locale_id
     *
     * @return string|null
     */
    public function getSourceLocaleId()
    {
        return $this->container['source_locale_id'];
    }

    /**
     * Sets source_locale_id
     *
     * @param string|null $source_locale_id Source locale for the order. Can be the name or public id of the source locale. Preferred is the public id.
     *
     * @return $this
     */
    public function setSourceLocaleId($source_locale_id)
    {
        $this->container['source_locale_id'] = $source_locale_id;

        return $this;
    }

    /**
     * Gets target_locale_ids
     *
     * @return string[]|null
     */
    public function getTargetLocaleIds()
    {
        return $this->container['target_locale_ids'];
    }

    /**
     * Sets target_locale_ids
     *
     * @param string[]|null $target_locale_ids List of target locales you want the source content translate to. Can be the name or public id of the target locales. Preferred is the public id.
     *
     * @return $this
     */
    public function setTargetLocaleIds($target_locale_ids)
    {
        $this->container['target_locale_ids'] = $target_locale_ids;

        return $this;
    }

    /**
     * Gets translation_type
     *
     * @return string|null
     */
    public function getTranslationType()
    {
        return $this->container['translation_type'];
    }

    /**
     * Sets translation_type
     *
     * @param string|null $translation_type Name of the quality level, availability depends on the LSP. Can be one of:  standard, pro (for orders processed by Gengo) and one of regular, premium, enterprise (for orders processed by TextMaster)
     *
     * @return $this
     */
    public function setTranslationType($translation_type)
    {
        $this->container['translation_type'] = $translation_type;

        return $this;
    }

    /**
     * Gets tag
     *
     * @return string|null
     */
    public function getTag()
    {
        return $this->container['tag'];
    }

    /**
     * Sets tag
     *
     * @param string|null $tag Tag you want to order translations for.
     *
     * @return $this
     */
    public function setTag($tag)
    {
        $this->container['tag'] = $tag;

        return $this;
    }

    /**
     * Gets message
     *
     * @return string|null
     */
    public function getMessage()
    {
        return $this->container['message'];
    }

    /**
     * Sets message
     *
     * @param string|null $message Message that is displayed to the translators for description.
     *
     * @return $this
     */
    public function setMessage($message)
    {
        $this->container['message'] = $message;

        return $this;
    }

    /**
     * Gets styleguide_id
     *
     * @return string|null
     */
    public function getStyleguideId()
    {
        return $this->container['styleguide_id'];
    }

    /**
     * Sets styleguide_id
     *
     * @param string|null $styleguide_id Style guide for translators to be sent with the order.
     *
     * @return $this
     */
    public function setStyleguideId($styleguide_id)
    {
        $this->container['styleguide_id'] = $styleguide_id;

        return $this;
    }

    /**
     * Gets unverify_translations_upon_delivery
     *
     * @return bool|null
     */
    public function getUnverifyTranslationsUponDelivery()
    {
        return $this->container['unverify_translations_upon_delivery'];
    }

    /**
     * Sets unverify_translations_upon_delivery
     *
     * @param bool|null $unverify_translations_upon_delivery Unverify translations upon delivery.
     *
     * @return $this
     */
    public function setUnverifyTranslationsUponDelivery($unverify_translations_upon_delivery)
    {
        $this->container['unverify_translations_upon_delivery'] = $unverify_translations_upon_delivery;

        return $this;
    }

    /**
     * Gets include_untranslated_keys
     *
     * @return bool|null
     */
    public function getIncludeUntranslatedKeys()
    {
        return $this->container['include_untranslated_keys'];
    }

    /**
     * Sets include_untranslated_keys
     *
     * @param bool|null $include_untranslated_keys Order translations for keys with untranslated content in the selected target locales.
     *
     * @return $this
     */
    public function setIncludeUntranslatedKeys($include_untranslated_keys)
    {
        $this->container['include_untranslated_keys'] = $include_untranslated_keys;

        return $this;
    }

    /**
     * Gets include_unverified_translations
     *
     * @return bool|null
     */
    public function getIncludeUnverifiedTranslations()
    {
        return $this->container['include_unverified_translations'];
    }

    /**
     * Sets include_unverified_translations
     *
     * @param bool|null $include_unverified_translations Order translations for keys with unverified content in the selected target locales.
     *
     * @return $this
     */
    public function setIncludeUnverifiedTranslations($include_unverified_translations)
    {
        $this->container['include_unverified_translations'] = $include_unverified_translations;

        return $this;
    }

    /**
     * Gets category
     *
     * @return string|null
     */
    public function getCategory()
    {
        return $this->container['category'];
    }

    /**
     * Sets category
     *
     * @param string|null $category Category to use (required for orders processed by TextMaster).
     *
     * @return $this
     */
    public function setCategory($category)
    {
        $this->container['category'] = $category;

        return $this;
    }

    /**
     * Gets quality
     *
     * @return bool|null
     */
    public function getQuality()
    {
        return $this->container['quality'];
    }

    /**
     * Sets quality
     *
     * @param bool|null $quality Extra proofreading option to ensure consistency in vocabulary and style. Only available for orders processed by TextMaster.
     *
     * @return $this
     */
    public function setQuality($quality)
    {
        $this->container['quality'] = $quality;

        return $this;
    }

    /**
     * Gets priority
     *
     * @return bool|null
     */
    public function getPriority()
    {
        return $this->container['priority'];
    }

    /**
     * Sets priority
     *
     * @param bool|null $priority Indicates whether the priority option should be ordered which decreases turnaround time by 30%. Available only for orders processed by TextMaster.
     *
     * @return $this
     */
    public function setPriority($priority)
    {
        $this->container['priority'] = $priority;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


