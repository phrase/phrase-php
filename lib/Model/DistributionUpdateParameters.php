<?php
/**
 * DistributionUpdateParameters
 *
 * PHP version 5
 *
 * @category Class
 * @package  Phrase
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Phrase Strings API Reference
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@phrase.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Phrase\Model;

use \ArrayAccess;
use \Phrase\ObjectSerializer;

/**
 * DistributionUpdateParameters Class Doc Comment
 *
 * @category Class
 * @package  Phrase
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class DistributionUpdateParameters implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'distribution_update_parameters';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'project_id' => 'string',
        'platforms' => 'string[]',
        'locale_ids' => 'string[]',
        'format_options' => 'map[string,string]',
        'fallback_locales_enabled' => 'bool',
        'fallback_to_non_regional_locale' => 'bool',
        'fallback_to_default_locale' => 'bool',
        'use_last_reviewed_version' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'name' => null,
        'project_id' => null,
        'platforms' => null,
        'locale_ids' => null,
        'format_options' => null,
        'fallback_locales_enabled' => null,
        'fallback_to_non_regional_locale' => null,
        'fallback_to_default_locale' => null,
        'use_last_reviewed_version' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'project_id' => 'project_id',
        'platforms' => 'platforms',
        'locale_ids' => 'locale_ids',
        'format_options' => 'format_options',
        'fallback_locales_enabled' => 'fallback_locales_enabled',
        'fallback_to_non_regional_locale' => 'fallback_to_non_regional_locale',
        'fallback_to_default_locale' => 'fallback_to_default_locale',
        'use_last_reviewed_version' => 'use_last_reviewed_version'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'project_id' => 'setProjectId',
        'platforms' => 'setPlatforms',
        'locale_ids' => 'setLocaleIds',
        'format_options' => 'setFormatOptions',
        'fallback_locales_enabled' => 'setFallbackLocalesEnabled',
        'fallback_to_non_regional_locale' => 'setFallbackToNonRegionalLocale',
        'fallback_to_default_locale' => 'setFallbackToDefaultLocale',
        'use_last_reviewed_version' => 'setUseLastReviewedVersion'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'project_id' => 'getProjectId',
        'platforms' => 'getPlatforms',
        'locale_ids' => 'getLocaleIds',
        'format_options' => 'getFormatOptions',
        'fallback_locales_enabled' => 'getFallbackLocalesEnabled',
        'fallback_to_non_regional_locale' => 'getFallbackToNonRegionalLocale',
        'fallback_to_default_locale' => 'getFallbackToDefaultLocale',
        'use_last_reviewed_version' => 'getUseLastReviewedVersion'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['project_id'] = isset($data['project_id']) ? $data['project_id'] : null;
        $this->container['platforms'] = isset($data['platforms']) ? $data['platforms'] : null;
        $this->container['locale_ids'] = isset($data['locale_ids']) ? $data['locale_ids'] : null;
        $this->container['format_options'] = isset($data['format_options']) ? $data['format_options'] : null;
        $this->container['fallback_locales_enabled'] = isset($data['fallback_locales_enabled']) ? $data['fallback_locales_enabled'] : null;
        $this->container['fallback_to_non_regional_locale'] = isset($data['fallback_to_non_regional_locale']) ? $data['fallback_to_non_regional_locale'] : null;
        $this->container['fallback_to_default_locale'] = isset($data['fallback_to_default_locale']) ? $data['fallback_to_default_locale'] : null;
        $this->container['use_last_reviewed_version'] = isset($data['use_last_reviewed_version']) ? $data['use_last_reviewed_version'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Name of the distribution
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets project_id
     *
     * @return string|null
     */
    public function getProjectId()
    {
        return $this->container['project_id'];
    }

    /**
     * Sets project_id
     *
     * @param string|null $project_id Project id the distribution should be assigned to.
     *
     * @return $this
     */
    public function setProjectId($project_id)
    {
        $this->container['project_id'] = $project_id;

        return $this;
    }

    /**
     * Gets platforms
     *
     * @return string[]|null
     */
    public function getPlatforms()
    {
        return $this->container['platforms'];
    }

    /**
     * Sets platforms
     *
     * @param string[]|null $platforms List of platforms the distribution should support.
     *
     * @return $this
     */
    public function setPlatforms($platforms)
    {
        $this->container['platforms'] = $platforms;

        return $this;
    }

    /**
     * Gets locale_ids
     *
     * @return string[]|null
     */
    public function getLocaleIds()
    {
        return $this->container['locale_ids'];
    }

    /**
     * Sets locale_ids
     *
     * @param string[]|null $locale_ids List of locale ids that will be part of distribution releases
     *
     * @return $this
     */
    public function setLocaleIds($locale_ids)
    {
        $this->container['locale_ids'] = $locale_ids;

        return $this;
    }

    /**
     * Gets format_options
     *
     * @return map[string,string]|null
     */
    public function getFormatOptions()
    {
        return $this->container['format_options'];
    }

    /**
     * Sets format_options
     *
     * @param map[string,string]|null $format_options Additional formatting and render options. Only <code>enclose_in_cdata</code> is available for platform <code>android</code>.
     *
     * @return $this
     */
    public function setFormatOptions($format_options)
    {
        $this->container['format_options'] = $format_options;

        return $this;
    }

    /**
     * Gets fallback_locales_enabled
     *
     * @return bool|null
     */
    public function getFallbackLocalesEnabled()
    {
        return $this->container['fallback_locales_enabled'];
    }

    /**
     * Sets fallback_locales_enabled
     *
     * @param bool|null $fallback_locales_enabled Use fallback locale if there is no translation in the current locale.
     *
     * @return $this
     */
    public function setFallbackLocalesEnabled($fallback_locales_enabled)
    {
        $this->container['fallback_locales_enabled'] = $fallback_locales_enabled;

        return $this;
    }

    /**
     * Gets fallback_to_non_regional_locale
     *
     * @return bool|null
     */
    public function getFallbackToNonRegionalLocale()
    {
        return $this->container['fallback_to_non_regional_locale'];
    }

    /**
     * Sets fallback_to_non_regional_locale
     *
     * @param bool|null $fallback_to_non_regional_locale Indicates whether to fallback to non regional locale when locale can not be found
     *
     * @return $this
     */
    public function setFallbackToNonRegionalLocale($fallback_to_non_regional_locale)
    {
        $this->container['fallback_to_non_regional_locale'] = $fallback_to_non_regional_locale;

        return $this;
    }

    /**
     * Gets fallback_to_default_locale
     *
     * @return bool|null
     */
    public function getFallbackToDefaultLocale()
    {
        return $this->container['fallback_to_default_locale'];
    }

    /**
     * Sets fallback_to_default_locale
     *
     * @param bool|null $fallback_to_default_locale Indicates whether to fallback to projects default locale when locale can not be found
     *
     * @return $this
     */
    public function setFallbackToDefaultLocale($fallback_to_default_locale)
    {
        $this->container['fallback_to_default_locale'] = $fallback_to_default_locale;

        return $this;
    }

    /**
     * Gets use_last_reviewed_version
     *
     * @return bool|null
     */
    public function getUseLastReviewedVersion()
    {
        return $this->container['use_last_reviewed_version'];
    }

    /**
     * Sets use_last_reviewed_version
     *
     * @param bool|null $use_last_reviewed_version Use last reviewed instead of latest translation in a project
     *
     * @return $this
     */
    public function setUseLastReviewedVersion($use_last_reviewed_version)
    {
        $this->container['use_last_reviewed_version'] = $use_last_reviewed_version;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


