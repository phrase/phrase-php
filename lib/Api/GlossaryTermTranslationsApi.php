<?php
/**
 * GlossaryTermTranslationsApi
 * PHP version 5
 *
 * @category Class
 * @package  Phrase
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Phrase Strings API Reference
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@phrase.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Phrase\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Phrase\ApiException;
use Phrase\Configuration;
use Phrase\HeaderSelector;
use Phrase\ObjectSerializer;

/**
 * GlossaryTermTranslationsApi Class Doc Comment
 *
 * @category Class
 * @package  Phrase
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class GlossaryTermTranslationsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $host_index (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $host_index = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $host_index;
    }

    /**
     * Set the host index
     *
     * @param  int Host index (required)
     */
    public function setHostIndex($host_index)
    {
        $this->hostIndex = $host_index;
    }

    /**
     * Get the host index
     *
     * @return Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation glossaryTermTranslationCreate
     *
     * Create a translation for a term
     *
     * @param  string $account_id Account ID (required)
     * @param  string $glossary_id Glossary ID (required)
     * @param  string $term_id Term ID (required)
     * @param  \Phrase\Model\GlossaryTermTranslationCreateParameters $glossary_term_translation_create_parameters glossary_term_translation_create_parameters (required)
     * @param  string $x_phrase_app_otp Two-Factor-Authentication token (optional) (optional)
     *
     * @throws \Phrase\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Phrase\Model\GlossaryTermTranslation
     */
    public function glossaryTermTranslationCreate($account_id, $glossary_id, $term_id, $glossary_term_translation_create_parameters, $x_phrase_app_otp = null)
    {
        list($response) = $this->glossaryTermTranslationCreateWithHttpInfo($account_id, $glossary_id, $term_id, $glossary_term_translation_create_parameters, $x_phrase_app_otp);
        return $response;
    }

    /**
     * Operation glossaryTermTranslationCreateWithHttpInfo
     *
     * Create a translation for a term
     *
     * @param  string $account_id Account ID (required)
     * @param  string $glossary_id Glossary ID (required)
     * @param  string $term_id Term ID (required)
     * @param  \Phrase\Model\GlossaryTermTranslationCreateParameters $glossary_term_translation_create_parameters (required)
     * @param  string $x_phrase_app_otp Two-Factor-Authentication token (optional) (optional)
     *
     * @throws \Phrase\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Phrase\Model\GlossaryTermTranslation, HTTP status code, HTTP response headers (array of strings)
     */
    public function glossaryTermTranslationCreateWithHttpInfo($account_id, $glossary_id, $term_id, $glossary_term_translation_create_parameters, $x_phrase_app_otp = null)
    {
        $request = $this->glossaryTermTranslationCreateRequest($account_id, $glossary_id, $term_id, $glossary_term_translation_create_parameters, $x_phrase_app_otp);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 201:
                    if ('\Phrase\Model\GlossaryTermTranslation' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Phrase\Model\GlossaryTermTranslation', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Phrase\Model\GlossaryTermTranslation';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Phrase\Model\GlossaryTermTranslation',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation glossaryTermTranslationCreateAsync
     *
     * Create a translation for a term
     *
     * @param  string $account_id Account ID (required)
     * @param  string $glossary_id Glossary ID (required)
     * @param  string $term_id Term ID (required)
     * @param  \Phrase\Model\GlossaryTermTranslationCreateParameters $glossary_term_translation_create_parameters (required)
     * @param  string $x_phrase_app_otp Two-Factor-Authentication token (optional) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function glossaryTermTranslationCreateAsync($account_id, $glossary_id, $term_id, $glossary_term_translation_create_parameters, $x_phrase_app_otp = null)
    {
        return $this->glossaryTermTranslationCreateAsyncWithHttpInfo($account_id, $glossary_id, $term_id, $glossary_term_translation_create_parameters, $x_phrase_app_otp)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation glossaryTermTranslationCreateAsyncWithHttpInfo
     *
     * Create a translation for a term
     *
     * @param  string $account_id Account ID (required)
     * @param  string $glossary_id Glossary ID (required)
     * @param  string $term_id Term ID (required)
     * @param  \Phrase\Model\GlossaryTermTranslationCreateParameters $glossary_term_translation_create_parameters (required)
     * @param  string $x_phrase_app_otp Two-Factor-Authentication token (optional) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function glossaryTermTranslationCreateAsyncWithHttpInfo($account_id, $glossary_id, $term_id, $glossary_term_translation_create_parameters, $x_phrase_app_otp = null)
    {
        $returnType = '\Phrase\Model\GlossaryTermTranslation';
        $request = $this->glossaryTermTranslationCreateRequest($account_id, $glossary_id, $term_id, $glossary_term_translation_create_parameters, $x_phrase_app_otp);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'glossaryTermTranslationCreate'
     *
     * @param  string $account_id Account ID (required)
     * @param  string $glossary_id Glossary ID (required)
     * @param  string $term_id Term ID (required)
     * @param  \Phrase\Model\GlossaryTermTranslationCreateParameters $glossary_term_translation_create_parameters (required)
     * @param  string $x_phrase_app_otp Two-Factor-Authentication token (optional) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function glossaryTermTranslationCreateRequest($account_id, $glossary_id, $term_id, $glossary_term_translation_create_parameters, $x_phrase_app_otp = null)
    {
        // verify the required parameter 'account_id' is set
        if ($account_id === null || (is_array($account_id) && count($account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_id when calling glossaryTermTranslationCreate'
            );
        }
        // verify the required parameter 'glossary_id' is set
        if ($glossary_id === null || (is_array($glossary_id) && count($glossary_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $glossary_id when calling glossaryTermTranslationCreate'
            );
        }
        // verify the required parameter 'term_id' is set
        if ($term_id === null || (is_array($term_id) && count($term_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $term_id when calling glossaryTermTranslationCreate'
            );
        }
        // verify the required parameter 'glossary_term_translation_create_parameters' is set
        if ($glossary_term_translation_create_parameters === null || (is_array($glossary_term_translation_create_parameters) && count($glossary_term_translation_create_parameters) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $glossary_term_translation_create_parameters when calling glossaryTermTranslationCreate'
            );
        }

        $resourcePath = '/accounts/{account_id}/glossaries/{glossary_id}/terms/{term_id}/translations';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_phrase_app_otp !== null) {
            $headerParams['X-PhraseApp-OTP'] = ObjectSerializer::toHeaderValue($x_phrase_app_otp);
        }

        // path params
        if ($account_id !== null) {
            $resourcePath = str_replace(
                '{' . 'account_id' . '}',
                ObjectSerializer::toPathValue($account_id),
                $resourcePath
            );
        }
        // path params
        if ($glossary_id !== null) {
            $resourcePath = str_replace(
                '{' . 'glossary_id' . '}',
                ObjectSerializer::toPathValue($glossary_id),
                $resourcePath
            );
        }
        // path params
        if ($term_id !== null) {
            $resourcePath = str_replace(
                '{' . 'term_id' . '}',
                ObjectSerializer::toPathValue($term_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($glossary_term_translation_create_parameters)) {
            $_tempBody = $glossary_term_translation_create_parameters;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation glossaryTermTranslationDelete
     *
     * Delete a translation for a term
     *
     * @param  string $account_id Account ID (required)
     * @param  string $glossary_id Glossary ID (required)
     * @param  string $term_id Term ID (required)
     * @param  string $id ID (required)
     * @param  string $x_phrase_app_otp Two-Factor-Authentication token (optional) (optional)
     *
     * @throws \Phrase\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function glossaryTermTranslationDelete($account_id, $glossary_id, $term_id, $id, $x_phrase_app_otp = null)
    {
        $this->glossaryTermTranslationDeleteWithHttpInfo($account_id, $glossary_id, $term_id, $id, $x_phrase_app_otp);
    }

    /**
     * Operation glossaryTermTranslationDeleteWithHttpInfo
     *
     * Delete a translation for a term
     *
     * @param  string $account_id Account ID (required)
     * @param  string $glossary_id Glossary ID (required)
     * @param  string $term_id Term ID (required)
     * @param  string $id ID (required)
     * @param  string $x_phrase_app_otp Two-Factor-Authentication token (optional) (optional)
     *
     * @throws \Phrase\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function glossaryTermTranslationDeleteWithHttpInfo($account_id, $glossary_id, $term_id, $id, $x_phrase_app_otp = null)
    {
        $request = $this->glossaryTermTranslationDeleteRequest($account_id, $glossary_id, $term_id, $id, $x_phrase_app_otp);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation glossaryTermTranslationDeleteAsync
     *
     * Delete a translation for a term
     *
     * @param  string $account_id Account ID (required)
     * @param  string $glossary_id Glossary ID (required)
     * @param  string $term_id Term ID (required)
     * @param  string $id ID (required)
     * @param  string $x_phrase_app_otp Two-Factor-Authentication token (optional) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function glossaryTermTranslationDeleteAsync($account_id, $glossary_id, $term_id, $id, $x_phrase_app_otp = null)
    {
        return $this->glossaryTermTranslationDeleteAsyncWithHttpInfo($account_id, $glossary_id, $term_id, $id, $x_phrase_app_otp)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation glossaryTermTranslationDeleteAsyncWithHttpInfo
     *
     * Delete a translation for a term
     *
     * @param  string $account_id Account ID (required)
     * @param  string $glossary_id Glossary ID (required)
     * @param  string $term_id Term ID (required)
     * @param  string $id ID (required)
     * @param  string $x_phrase_app_otp Two-Factor-Authentication token (optional) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function glossaryTermTranslationDeleteAsyncWithHttpInfo($account_id, $glossary_id, $term_id, $id, $x_phrase_app_otp = null)
    {
        $returnType = '';
        $request = $this->glossaryTermTranslationDeleteRequest($account_id, $glossary_id, $term_id, $id, $x_phrase_app_otp);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'glossaryTermTranslationDelete'
     *
     * @param  string $account_id Account ID (required)
     * @param  string $glossary_id Glossary ID (required)
     * @param  string $term_id Term ID (required)
     * @param  string $id ID (required)
     * @param  string $x_phrase_app_otp Two-Factor-Authentication token (optional) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function glossaryTermTranslationDeleteRequest($account_id, $glossary_id, $term_id, $id, $x_phrase_app_otp = null)
    {
        // verify the required parameter 'account_id' is set
        if ($account_id === null || (is_array($account_id) && count($account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_id when calling glossaryTermTranslationDelete'
            );
        }
        // verify the required parameter 'glossary_id' is set
        if ($glossary_id === null || (is_array($glossary_id) && count($glossary_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $glossary_id when calling glossaryTermTranslationDelete'
            );
        }
        // verify the required parameter 'term_id' is set
        if ($term_id === null || (is_array($term_id) && count($term_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $term_id when calling glossaryTermTranslationDelete'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling glossaryTermTranslationDelete'
            );
        }

        $resourcePath = '/accounts/{account_id}/glossaries/{glossary_id}/terms/{term_id}/translations/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_phrase_app_otp !== null) {
            $headerParams['X-PhraseApp-OTP'] = ObjectSerializer::toHeaderValue($x_phrase_app_otp);
        }

        // path params
        if ($account_id !== null) {
            $resourcePath = str_replace(
                '{' . 'account_id' . '}',
                ObjectSerializer::toPathValue($account_id),
                $resourcePath
            );
        }
        // path params
        if ($glossary_id !== null) {
            $resourcePath = str_replace(
                '{' . 'glossary_id' . '}',
                ObjectSerializer::toPathValue($glossary_id),
                $resourcePath
            );
        }
        // path params
        if ($term_id !== null) {
            $resourcePath = str_replace(
                '{' . 'term_id' . '}',
                ObjectSerializer::toPathValue($term_id),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation glossaryTermTranslationUpdate
     *
     * Update a translation for a term
     *
     * @param  string $account_id Account ID (required)
     * @param  string $glossary_id Glossary ID (required)
     * @param  string $term_id Term ID (required)
     * @param  string $id ID (required)
     * @param  \Phrase\Model\GlossaryTermTranslationUpdateParameters $glossary_term_translation_update_parameters glossary_term_translation_update_parameters (required)
     * @param  string $x_phrase_app_otp Two-Factor-Authentication token (optional) (optional)
     *
     * @throws \Phrase\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Phrase\Model\GlossaryTermTranslation
     */
    public function glossaryTermTranslationUpdate($account_id, $glossary_id, $term_id, $id, $glossary_term_translation_update_parameters, $x_phrase_app_otp = null)
    {
        list($response) = $this->glossaryTermTranslationUpdateWithHttpInfo($account_id, $glossary_id, $term_id, $id, $glossary_term_translation_update_parameters, $x_phrase_app_otp);
        return $response;
    }

    /**
     * Operation glossaryTermTranslationUpdateWithHttpInfo
     *
     * Update a translation for a term
     *
     * @param  string $account_id Account ID (required)
     * @param  string $glossary_id Glossary ID (required)
     * @param  string $term_id Term ID (required)
     * @param  string $id ID (required)
     * @param  \Phrase\Model\GlossaryTermTranslationUpdateParameters $glossary_term_translation_update_parameters (required)
     * @param  string $x_phrase_app_otp Two-Factor-Authentication token (optional) (optional)
     *
     * @throws \Phrase\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Phrase\Model\GlossaryTermTranslation, HTTP status code, HTTP response headers (array of strings)
     */
    public function glossaryTermTranslationUpdateWithHttpInfo($account_id, $glossary_id, $term_id, $id, $glossary_term_translation_update_parameters, $x_phrase_app_otp = null)
    {
        $request = $this->glossaryTermTranslationUpdateRequest($account_id, $glossary_id, $term_id, $id, $glossary_term_translation_update_parameters, $x_phrase_app_otp);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Phrase\Model\GlossaryTermTranslation' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Phrase\Model\GlossaryTermTranslation', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Phrase\Model\GlossaryTermTranslation';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Phrase\Model\GlossaryTermTranslation',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation glossaryTermTranslationUpdateAsync
     *
     * Update a translation for a term
     *
     * @param  string $account_id Account ID (required)
     * @param  string $glossary_id Glossary ID (required)
     * @param  string $term_id Term ID (required)
     * @param  string $id ID (required)
     * @param  \Phrase\Model\GlossaryTermTranslationUpdateParameters $glossary_term_translation_update_parameters (required)
     * @param  string $x_phrase_app_otp Two-Factor-Authentication token (optional) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function glossaryTermTranslationUpdateAsync($account_id, $glossary_id, $term_id, $id, $glossary_term_translation_update_parameters, $x_phrase_app_otp = null)
    {
        return $this->glossaryTermTranslationUpdateAsyncWithHttpInfo($account_id, $glossary_id, $term_id, $id, $glossary_term_translation_update_parameters, $x_phrase_app_otp)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation glossaryTermTranslationUpdateAsyncWithHttpInfo
     *
     * Update a translation for a term
     *
     * @param  string $account_id Account ID (required)
     * @param  string $glossary_id Glossary ID (required)
     * @param  string $term_id Term ID (required)
     * @param  string $id ID (required)
     * @param  \Phrase\Model\GlossaryTermTranslationUpdateParameters $glossary_term_translation_update_parameters (required)
     * @param  string $x_phrase_app_otp Two-Factor-Authentication token (optional) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function glossaryTermTranslationUpdateAsyncWithHttpInfo($account_id, $glossary_id, $term_id, $id, $glossary_term_translation_update_parameters, $x_phrase_app_otp = null)
    {
        $returnType = '\Phrase\Model\GlossaryTermTranslation';
        $request = $this->glossaryTermTranslationUpdateRequest($account_id, $glossary_id, $term_id, $id, $glossary_term_translation_update_parameters, $x_phrase_app_otp);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'glossaryTermTranslationUpdate'
     *
     * @param  string $account_id Account ID (required)
     * @param  string $glossary_id Glossary ID (required)
     * @param  string $term_id Term ID (required)
     * @param  string $id ID (required)
     * @param  \Phrase\Model\GlossaryTermTranslationUpdateParameters $glossary_term_translation_update_parameters (required)
     * @param  string $x_phrase_app_otp Two-Factor-Authentication token (optional) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function glossaryTermTranslationUpdateRequest($account_id, $glossary_id, $term_id, $id, $glossary_term_translation_update_parameters, $x_phrase_app_otp = null)
    {
        // verify the required parameter 'account_id' is set
        if ($account_id === null || (is_array($account_id) && count($account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_id when calling glossaryTermTranslationUpdate'
            );
        }
        // verify the required parameter 'glossary_id' is set
        if ($glossary_id === null || (is_array($glossary_id) && count($glossary_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $glossary_id when calling glossaryTermTranslationUpdate'
            );
        }
        // verify the required parameter 'term_id' is set
        if ($term_id === null || (is_array($term_id) && count($term_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $term_id when calling glossaryTermTranslationUpdate'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling glossaryTermTranslationUpdate'
            );
        }
        // verify the required parameter 'glossary_term_translation_update_parameters' is set
        if ($glossary_term_translation_update_parameters === null || (is_array($glossary_term_translation_update_parameters) && count($glossary_term_translation_update_parameters) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $glossary_term_translation_update_parameters when calling glossaryTermTranslationUpdate'
            );
        }

        $resourcePath = '/accounts/{account_id}/glossaries/{glossary_id}/terms/{term_id}/translations/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_phrase_app_otp !== null) {
            $headerParams['X-PhraseApp-OTP'] = ObjectSerializer::toHeaderValue($x_phrase_app_otp);
        }

        // path params
        if ($account_id !== null) {
            $resourcePath = str_replace(
                '{' . 'account_id' . '}',
                ObjectSerializer::toPathValue($account_id),
                $resourcePath
            );
        }
        // path params
        if ($glossary_id !== null) {
            $resourcePath = str_replace(
                '{' . 'glossary_id' . '}',
                ObjectSerializer::toPathValue($glossary_id),
                $resourcePath
            );
        }
        // path params
        if ($term_id !== null) {
            $resourcePath = str_replace(
                '{' . 'term_id' . '}',
                ObjectSerializer::toPathValue($term_id),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($glossary_term_translation_update_parameters)) {
            $_tempBody = $glossary_term_translation_update_parameters;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
    /**
     * Append to form params, handle object params
     */
    protected function formParamsAppend(&$formParams, $name, $value)
    {
        if (is_object($value)) {
            foreach ((array) $value as $k => $v) {
                $formParams[$name.'['.$k.']'] = ObjectSerializer::toFormValue($v);
            }

            return;
        }

        $formParams[$name] = ObjectSerializer::toFormValue($value);
    }
}
